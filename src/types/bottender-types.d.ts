/** Declaration file generated by dts-gen */

export namespace Bot {
    namespace prototype {
        const connector: any;

        const handler: any;

        const sessions: any;

        function createRequestHandler(...args: any[]): void;

        function onEvent(...args: any[]): void;

        function setInitialState(...args: any[]): void;

        function use(...args: any[]): void;

    }

}

export namespace CacheBasedSessionStore {
    namespace prototype {
        function destroy(...args: any[]): void;

        function init(...args: any[]): void;

        function read(...args: any[]): void;

        function write(...args: any[]): void;

    }

}

export namespace ClassifierHandler {
    namespace prototype {
        function build(...args: any[]): void;

        function onIntent(...args: any[]): void;

        function onUnmatched(...args: any[]): void;

    }

}

export namespace ConsoleBot {
    namespace prototype {
        const connector: any;

        const handler: any;

        const sessions: any;

        function createRequestHandler(...args: any[]): void;

        function createRuntime(...args: any[]): void;

        function onEvent(...args: any[]): void;

        function setInitialState(...args: any[]): void;

        function use(...args: any[]): void;

    }

}

export namespace ConsoleConnector {
    namespace prototype {
        const client: any;

        const platform: string;

        function createContext(...args: any[]): void;

        function getUniqueSessionKey(...args: any[]): void;

        function mapRequestToEvents(...args: any[]): void;

        function updateSession(...args: any[]): void;

    }

}

export namespace ConsoleContext {
    namespace prototype {
        const client: any;

        const event: any;

        const isHandled: any;

        const platform: string;

        const session: any;

        const state: {
        };

        function resetState(...args: any[]): void;

        function sendText(...args: any[]): void;

        function setState(...args: any[]): void;

        function typing(...args: any[]): void;

    }

}

export namespace FileSessionStore {
    namespace prototype {
        function destroy(...args: any[]): void;

        function getJFS(...args: any[]): void;

        function init(...args: any[]): void;

        function read(...args: any[]): void;

        function write(...args: any[]): void;

    }

}

export namespace Handler {
    namespace prototype {
        function build(...args: any[]): void;

        function on(...args: any[]): void;

        function onError(...args: any[]): void;

        function onEvent(...args: any[]): void;

        function onMessage(...args: any[]): void;

        function onText(...args: any[]): void;

        function onUnhandled(...args: any[]): void;

    }

}

export namespace LineBot {
    namespace prototype {
        const connector: any;

        const handler: any;

        const sessions: any;

        function createRequestHandler(...args: any[]): void;

        function onEvent(...args: any[]): void;

        function setInitialState(...args: any[]): void;

        function use(...args: any[]): void;

    }

}

export namespace LineConnector {
    namespace prototype {
        const client: any;

        const platform: string;

        function createContext(...args: any[]): void;

        function getUniqueSessionKey(...args: any[]): void;

        function mapRequestToEvents(...args: any[]): void;

        function updateSession(...args: any[]): void;

        function verifySignature(...args: any[]): void;

    }

}

export interface LineContext {
        client: any;

        event: any;

        isHandled: any;

        isReplied: any;

        platform: string;

        session: any;

        state: any;
        getLinkedRichMenu(...args: any[]): void;

        linkRichMenu(...args: any[]): void;

        pushAudio(...args: any[]): void;

        pushButtonTemplate(...args: any[]): void;

        pushCarouselTemplate(...args: any[]): void;

        pushConfirmTemplate(...args: any[]): void;

        pushImage(...args: any[]): void;

        pushImageCarouselTemplate(...args: any[]): void;

        pushImagemap(...args: any[]): void;

        pushLocation(...args: any[]): void;

        pushSticker(...args: any[]): void;

        pushText(...args: any[]): void;

        pushVideo(...args: any[]): void;

        replyAudio(...args: any[]): void;

        replyButtonTemplate(...args: any[]): void;

        replyCarouselTemplate(...args: any[]): void;

        replyConfirmTemplate(...args: any[]): void;

        replyImage(...args: any[]): void;

        replyImageCarouselTemplate(...args: any[]): void;

        replyImagemap(...args: any[]): void;

        replyLocation(...args: any[]): void;

        replySticker(...args: any[]): void;

        replyText(...args: any[]): void;

        replyVideo(...args: any[]): void;

        resetState(...args: any[]): void;

        sendAudio(...args: any[]): void;

        sendButtonTemplate(...args: any[]): void;

        sendCarouselTemplate(...args: any[]): void;

        sendConfirmTemplate(...args: any[]): void;

        sendImage(...args: any[]): void;

        sendImageCarouselTemplate(...args: any[]): void;

        sendImagemap(...args: any[]): void;

        sendLocation(...args: any[]): void;

        sendSticker(...args: any[]): void;

        sendText(...args: any[]): void;

        sendVideo(...args: any[]): void;

        setState(...args: any[]): void;

        typing(...args: any[]): void;

        unlinkRichMenu(...args: any[]): void;


}

export namespace LineHandler {
    namespace prototype {
        function build(...args: any[]): void;

        function on(...args: any[]): void;

        function onBeacon(...args: any[]): void;

        function onError(...args: any[]): void;

        function onEvent(...args: any[]): void;

        function onFollow(...args: any[]): void;

        function onJoin(...args: any[]): void;

        function onLeave(...args: any[]): void;

        function onMessage(...args: any[]): void;

        function onPayload(...args: any[]): void;

        function onPostback(...args: any[]): void;

        function onText(...args: any[]): void;

        function onUnfollow(...args: any[]): void;

        function onUnhandled(...args: any[]): void;

    }

}

export namespace MemoryCacheStore {
    namespace prototype {
        function flush(...args: any[]): void;

        function forget(...args: any[]): void;

        function get(...args: any[]): void;

        function getPrefix(...args: any[]): void;

        function put(...args: any[]): void;

    }

}

export namespace MemorySessionStore {
    namespace prototype {
        function destroy(...args: any[]): void;

        function init(...args: any[]): void;

        function read(...args: any[]): void;

        function write(...args: any[]): void;

    }

}

export namespace MessengerBot {
    namespace prototype {
        const connector: any;

        const handler: any;

        const sessions: any;

        function createRequestHandler(...args: any[]): void;

        function onEvent(...args: any[]): void;

        function setInitialState(...args: any[]): void;

        function use(...args: any[]): void;

    }

}

export namespace MessengerConnector {
    namespace prototype {
        const client: any;

        const platform: string;

        function createContext(...args: any[]): void;

        function getUniqueSessionKey(...args: any[]): void;

        function mapRequestToEvents(...args: any[]): void;

        function updateSession(...args: any[]): void;

        function verifySignature(...args: any[]): void;

    }

}

export interface MessengerContext {
        client: any;

        event: any;

        isHandled: any;

        platform: string;

        session: any;

        state: any;

        associateLabel(...args: any[]): void;

        dissociateLabel(...args: any[]): void;

        getAssociatedLabels(...args: any[]): void;

        markSeen(...args: any[]): void;

        passThreadControl(...args: any[]): void;

        passThreadControlToPageInbox(...args: any[]): void;

        resetState(...args: any[]): void;

        sendAirlineBoardingPassTemplate(...args: any[]): void;

        sendAirlineCheckinTemplate(...args: any[]): void;

        sendAirlineFlightUpdateTemplate(...args: any[]): void;

        sendAirlineItineraryTemplate(...args: any[]): void;

        sendAttachment(...args: any[]): void;

        sendAudio(...args: any[]): void;

        sendButtonTemplate(...args: any[]): void;

        sendFile(...args: any[]): void;

        sendGenericTemplate(...args: any[]): void;

        sendImage(...args: any[]): void;

        sendListTemplate(...args: any[]): void;

        sendMediaTemplate(...args: any[]): void;

        sendMessage(...args: any[]): void;

        sendOpenGraphTemplate(...args: any[]): void;

        sendQuickReplies(...args: any[]): void;

        sendReceiptTemplate(...args: any[]): void;

        sendTemplate(...args: any[]): void;

        sendText(...args: any[]): void;

        sendVideo(...args: any[]): void;

        setState(...args: any[]): void;

        takeThreadControl(...args: any[]): void;

        typing(...args: any[]): void;

        typingOff(...args: any[]): void;

        typingOn(...args: any[]): void;

}

export namespace MessengerHandler {
    namespace prototype {
        function build(...args: any[]): void;

        function on(...args: any[]): void;

        function onAudio(...args: any[]): void;

        function onCheckoutUpdate(...args: any[]): void;

        function onDelivery(...args: any[]): void;

        function onEcho(...args: any[]): void;

        function onError(...args: any[]): void;

        function onEvent(...args: any[]): void;

        function onFallback(...args: any[]): void;

        function onFile(...args: any[]): void;

        function onImage(...args: any[]): void;

        function onLocation(...args: any[]): void;

        function onMessage(...args: any[]): void;

        function onOptin(...args: any[]): void;

        function onPayload(...args: any[]): void;

        function onPayment(...args: any[]): void;

        function onPostback(...args: any[]): void;

        function onPreCheckout(...args: any[]): void;

        function onQuickReply(...args: any[]): void;

        function onRead(...args: any[]): void;

        function onText(...args: any[]): void;

        function onUnhandled(...args: any[]): void;

        function onVideo(...args: any[]): void;

    }

}

export namespace MongoSessionStore {
    namespace prototype {
        function destroy(...args: any[]): void;

        function init(...args: any[]): void;

        function read(...args: any[]): void;

        function write(...args: any[]): void;

    }

}

export namespace RedisCacheStore {
    namespace prototype {
        function flush(...args: any[]): void;

        function forget(...args: any[]): void;

        function get(...args: any[]): void;

        function getPrefix(...args: any[]): void;

        function getRedis(...args: any[]): void;

        function put(...args: any[]): void;

        function setPrefix(...args: any[]): void;

    }

}

export namespace RedisSessionStore {
    namespace prototype {
        function destroy(...args: any[]): void;

        function init(...args: any[]): void;

        function read(...args: any[]): void;

        function write(...args: any[]): void;

    }

}

export namespace SlackBot {
    namespace prototype {
        const connector: any;

        const handler: any;

        const sessions: any;

        function createRequestHandler(...args: any[]): void;

        function onEvent(...args: any[]): void;

        function setInitialState(...args: any[]): void;

        function use(...args: any[]): void;

    }

}

export namespace SlackConnector {
    namespace prototype {
        const client: any;

        const platform: string;

        function createContext(...args: any[]): void;

        function getUniqueSessionKey(...args: any[]): void;

        function mapRequestToEvents(...args: any[]): void;

        function updateSession(...args: any[]): void;

    }

}

export namespace SlackContext {
    namespace prototype {
        const client: any;

        const event: any;

        const isHandled: any;

        const platform: string;

        const session: any;

        const state: {
        };

        function postMessage(...args: any[]): void;

        function resetState(...args: any[]): void;

        function sendText(...args: any[]): void;

        function setState(...args: any[]): void;

        function typing(...args: any[]): void;

    }

}

export namespace SlackHandler {
    namespace prototype {
        function build(...args: any[]): void;

        function on(...args: any[]): void;

        function onError(...args: any[]): void;

        function onEvent(...args: any[]): void;

        function onMessage(...args: any[]): void;

        function onText(...args: any[]): void;

        function onUnhandled(...args: any[]): void;

    }

}

export namespace TelegramBot {
    namespace prototype {
        const connector: any;

        const handler: any;

        const sessions: any;

        function createRequestHandler(...args: any[]): void;

        function onEvent(...args: any[]): void;

        function setInitialState(...args: any[]): void;

        function use(...args: any[]): void;

    }

}

export namespace TelegramConnector {
    namespace prototype {
        const client: any;

        const platform: string;

        function createContext(...args: any[]): void;

        function getUniqueSessionKey(...args: any[]): void;

        function mapRequestToEvents(...args: any[]): void;

        function updateSession(...args: any[]): void;

    }

}

export namespace TelegramContext {
    namespace prototype {
        const client: any;

        const event: any;

        const isHandled: any;

        const platform: string;

        const session: any;

        const state: {
        };

        function resetState(...args: any[]): void;

        function sendAudio(...args: any[]): void;

        function sendChatAction(...args: any[]): void;

        function sendContact(...args: any[]): void;

        function sendDocument(...args: any[]): void;

        function sendLocation(...args: any[]): void;

        function sendMessage(...args: any[]): void;

        function sendPhoto(...args: any[]): void;

        function sendSticker(...args: any[]): void;

        function sendText(...args: any[]): void;

        function sendVenue(...args: any[]): void;

        function sendVideo(...args: any[]): void;

        function sendVideoNote(...args: any[]): void;

        function sendVoice(...args: any[]): void;

        function setState(...args: any[]): void;

        function typing(...args: any[]): void;

    }

}

export namespace TelegramHandler {
    namespace prototype {
        function build(...args: any[]): void;

        function on(...args: any[]): void;

        function onAudio(...args: any[]): void;

        function onCallbackQuery(...args: any[]): void;

        function onContact(...args: any[]): void;

        function onDocument(...args: any[]): void;

        function onError(...args: any[]): void;

        function onEvent(...args: any[]): void;

        function onGame(...args: any[]): void;

        function onLocation(...args: any[]): void;

        function onMessage(...args: any[]): void;

        function onPayload(...args: any[]): void;

        function onPhoto(...args: any[]): void;

        function onSticker(...args: any[]): void;

        function onText(...args: any[]): void;

        function onUnhandled(...args: any[]): void;

        function onVenue(...args: any[]): void;

        function onVideo(...args: any[]): void;

        function onVideoNote(...args: any[]): void;

        function onVoice(...args: any[]): void;

    }

}

